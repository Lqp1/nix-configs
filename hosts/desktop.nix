# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  system.stateVersion = "25.05"; # Did you read the comment?
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.loader.systemd-boot.enable = true;
  boot.loader.systemd-boot.editor = false;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];
  networking.hostName = "thomas-desktop"; # Define your hostname.
  services.xserver.desktopManager.gnome.enable = true;
  services.redshift.enable = lib.mkForce false;
  environment.variables.TERMINAL = [ "kitty" ];

  services.libinput.mouse.accelProfile = "flat";

  hardware.graphics.enable = true;
  services.xserver.videoDrivers = [ "nvidia" ];
  hardware.nvidia.open = false; # Card is too old for the fresh and advised open source drivers
  hardware.nvidia.forceFullCompositionPipeline = true; # To reduce screen tearing

  # Suspend is buggy with the "old" nvidia card and not really useful wrt how I use the desktop
  systemd.sleep.extraConfig = ''
    AllowSuspend=no
    AllowHibernation=no
    AllowHybridSleep=no
    AllowSuspendThenHibernate=no
  '';

  fileSystems."/" =
    {
      device = "/dev/disk/by-uuid/78949a70-f664-44e2-8acd-e9cc7394ff3a";
      fsType = "ext4";
      options = [ "noatime" "nodiratime" "discard" ];
    };

  boot.initrd.luks.devices."luks-b0575706-4682-4fb7-92b3-e322f3b28904".device = "/dev/disk/by-uuid/b0575706-4682-4fb7-92b3-e322f3b28904";

  fileSystems."/boot" =
    {
      device = "/dev/disk/by-uuid/9B95-CF1A";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  fileSystems."/mnt/backup" =
    {
      device = "/dev/disk/by-uuid/0E629ED6629EC23F";
      fsType = "ntfs-3g";
      options = [ "uid=1000" "gid=100" "dmask=0027" "fmask=0137" ];
    };

  fileSystems."/tmp" =
    {
      device = "tmpfs";
      options = [ "nodev" "nosuid" "nodiratime" "noatime" "size=6G" ];
      fsType = "tmpfs";
    };

  fileSystems."/run" =
    {
      device = "tmpfs";
      options = [ "nodev" "nosuid" "nodiratime" "noatime" "size=2G" ];
      fsType = "tmpfs";
    };

  fileSystems."/var/tmp" =
    {
      device = "tmpfs";
      options = [ "nodev" "nosuid" "nodiratime" "noatime" "size=2G" ];
      fsType = "tmpfs";
    };


  swapDevices = [ ];
  users.users.famille = {
    isNormalUser = true;
    extraGroups = [
      "networkmanager"
    ];
    packages = with pkgs; [
      firefox
      vlc
      libreoffice
    ];
    shell = pkgs.bash;
  };

  environment.systemPackages = with pkgs; [
    spotify
    discord
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s20f0u5u3.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f0u4.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}

